// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	certificationFieldNames          = builder.RawFieldNames(&Certification{})
	certificationRows                = strings.Join(certificationFieldNames, ",")
	certificationRowsExpectAutoSet   = strings.Join(stringx.Remove(certificationFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	certificationRowsWithPlaceHolder = strings.Join(stringx.Remove(certificationFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	certificationModel interface {
		Insert(ctx context.Context, data *Certification) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Certification, error)
		Update(ctx context.Context, newData *Certification) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCertificationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Certification struct {
		Id        int64        `db:"id"`
		UserId    int64        `db:"user_id"`
		RealName  string       `db:"real_name"` // 真实姓名
		IdCard    string       `db:"id_card"`   // 身份证号码
		Imgs      string       `db:"imgs"`      // 身份证正反面照片地址 英文逗号隔开
		Status    int64        `db:"status"`    // 状态（0待处理 1通过 2驳回）
		Msg       string       `db:"msg"`
		CreatedAt sql.NullTime `db:"created_at"`
		UpdatedAt sql.NullTime `db:"updated_at"`
	}
)

func newCertificationModel(conn sqlx.SqlConn) *defaultCertificationModel {
	return &defaultCertificationModel{
		conn:  conn,
		table: "`certification`",
	}
}

func (m *defaultCertificationModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCertificationModel) FindOne(ctx context.Context, id int64) (*Certification, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", certificationRows, m.table)
	var resp Certification
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCertificationModel) Insert(ctx context.Context, data *Certification) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, certificationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.RealName, data.IdCard, data.Imgs, data.Status, data.Msg, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultCertificationModel) Update(ctx context.Context, data *Certification) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, certificationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.RealName, data.IdCard, data.Imgs, data.Status, data.Msg, data.CreatedAt, data.UpdatedAt, data.Id)
	return err
}

func (m *defaultCertificationModel) tableName() string {
	return m.table
}
