// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adminMenuPermissionFieldNames          = builder.RawFieldNames(&AdminMenuPermission{})
	adminMenuPermissionRows                = strings.Join(adminMenuPermissionFieldNames, ",")
	adminMenuPermissionRowsExpectAutoSet   = strings.Join(stringx.Remove(adminMenuPermissionFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	adminMenuPermissionRowsWithPlaceHolder = strings.Join(stringx.Remove(adminMenuPermissionFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	adminMenuPermissionModel interface {
		Insert(ctx context.Context, data *AdminMenuPermission) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AdminMenuPermission, error)
		Update(ctx context.Context, newData *AdminMenuPermission) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAdminMenuPermissionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AdminMenuPermission struct {
		Id           int64        `db:"id"`
		MenuId       int64        `db:"menu_id"`
		PermissionId int64        `db:"permission_id"`
		CreatedAt    sql.NullTime `db:"created_at"`
		UpdatedAt    sql.NullTime `db:"updated_at"`
	}
)

func newAdminMenuPermissionModel(conn sqlx.SqlConn) *defaultAdminMenuPermissionModel {
	return &defaultAdminMenuPermissionModel{
		conn:  conn,
		table: "`admin_menu_permission`",
	}
}

func (m *defaultAdminMenuPermissionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAdminMenuPermissionModel) FindOne(ctx context.Context, id int64) (*AdminMenuPermission, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", adminMenuPermissionRows, m.table)
	var resp AdminMenuPermission
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminMenuPermissionModel) Insert(ctx context.Context, data *AdminMenuPermission) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, adminMenuPermissionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.MenuId, data.PermissionId, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultAdminMenuPermissionModel) Update(ctx context.Context, data *AdminMenuPermission) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, adminMenuPermissionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.MenuId, data.PermissionId, data.CreatedAt, data.UpdatedAt, data.Id)
	return err
}

func (m *defaultAdminMenuPermissionModel) tableName() string {
	return m.table
}
