// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adminLogsFieldNames          = builder.RawFieldNames(&AdminLogs{})
	adminLogsRows                = strings.Join(adminLogsFieldNames, ",")
	adminLogsRowsExpectAutoSet   = strings.Join(stringx.Remove(adminLogsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	adminLogsRowsWithPlaceHolder = strings.Join(stringx.Remove(adminLogsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	adminLogsModel interface {
		Insert(ctx context.Context, data *AdminLogs) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AdminLogs, error)
		Update(ctx context.Context, newData *AdminLogs) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAdminLogsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AdminLogs struct {
		Id        int64          `db:"id"`       // ID
		UserId    int64          `db:"user_id"`  // 用户ID
		LogInfo   string         `db:"log_info"` // 操作描述 例如 登陆
		Ips       sql.NullString `db:"ips"`      // IP
		Address   sql.NullString `db:"address"`  // 地址
		CreatedAt sql.NullTime   `db:"created_at"`
		UpdatedAt sql.NullTime   `db:"updated_at"`
		Result    int64          `db:"result"` // 操作成功还是失败（1.成功，2.失败）
		Param     sql.NullString `db:"param"`  // 请求参数
	}
)

func newAdminLogsModel(conn sqlx.SqlConn) *defaultAdminLogsModel {
	return &defaultAdminLogsModel{
		conn:  conn,
		table: "`admin_logs`",
	}
}

func (m *defaultAdminLogsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAdminLogsModel) FindOne(ctx context.Context, id int64) (*AdminLogs, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", adminLogsRows, m.table)
	var resp AdminLogs
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminLogsModel) Insert(ctx context.Context, data *AdminLogs) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, adminLogsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.LogInfo, data.Ips, data.Address, data.CreatedAt, data.UpdatedAt, data.Result, data.Param)
	return ret, err
}

func (m *defaultAdminLogsModel) Update(ctx context.Context, data *AdminLogs) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, adminLogsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.LogInfo, data.Ips, data.Address, data.CreatedAt, data.UpdatedAt, data.Result, data.Param, data.Id)
	return err
}

func (m *defaultAdminLogsModel) tableName() string {
	return m.table
}
