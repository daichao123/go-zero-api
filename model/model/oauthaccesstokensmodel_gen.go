// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	oauthAccessTokensFieldNames          = builder.RawFieldNames(&OauthAccessTokens{})
	oauthAccessTokensRows                = strings.Join(oauthAccessTokensFieldNames, ",")
	oauthAccessTokensRowsExpectAutoSet   = strings.Join(stringx.Remove(oauthAccessTokensFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	oauthAccessTokensRowsWithPlaceHolder = strings.Join(stringx.Remove(oauthAccessTokensFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	oauthAccessTokensModel interface {
		Insert(ctx context.Context, data *OauthAccessTokens) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*OauthAccessTokens, error)
		Update(ctx context.Context, newData *OauthAccessTokens) error
		Delete(ctx context.Context, id string) error
	}

	defaultOauthAccessTokensModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OauthAccessTokens struct {
		Id        string         `db:"id"`
		UserId    sql.NullInt64  `db:"user_id"`
		ClientId  int64          `db:"client_id"`
		Name      sql.NullString `db:"name"`
		Scopes    sql.NullString `db:"scopes"`
		Revoked   int64          `db:"revoked"`
		CreatedAt sql.NullTime   `db:"created_at"`
		UpdatedAt sql.NullTime   `db:"updated_at"`
		ExpiresAt sql.NullTime   `db:"expires_at"`
	}
)

func newOauthAccessTokensModel(conn sqlx.SqlConn) *defaultOauthAccessTokensModel {
	return &defaultOauthAccessTokensModel{
		conn:  conn,
		table: "`oauth_access_tokens`",
	}
}

func (m *defaultOauthAccessTokensModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOauthAccessTokensModel) FindOne(ctx context.Context, id string) (*OauthAccessTokens, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", oauthAccessTokensRows, m.table)
	var resp OauthAccessTokens
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOauthAccessTokensModel) Insert(ctx context.Context, data *OauthAccessTokens) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, oauthAccessTokensRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.UserId, data.ClientId, data.Name, data.Scopes, data.Revoked, data.CreatedAt, data.UpdatedAt, data.ExpiresAt)
	return ret, err
}

func (m *defaultOauthAccessTokensModel) Update(ctx context.Context, data *OauthAccessTokens) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, oauthAccessTokensRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.ClientId, data.Name, data.Scopes, data.Revoked, data.CreatedAt, data.UpdatedAt, data.ExpiresAt, data.Id)
	return err
}

func (m *defaultOauthAccessTokensModel) tableName() string {
	return m.table
}
