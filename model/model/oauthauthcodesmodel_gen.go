// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	oauthAuthCodesFieldNames          = builder.RawFieldNames(&OauthAuthCodes{})
	oauthAuthCodesRows                = strings.Join(oauthAuthCodesFieldNames, ",")
	oauthAuthCodesRowsExpectAutoSet   = strings.Join(stringx.Remove(oauthAuthCodesFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	oauthAuthCodesRowsWithPlaceHolder = strings.Join(stringx.Remove(oauthAuthCodesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	oauthAuthCodesModel interface {
		Insert(ctx context.Context, data *OauthAuthCodes) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*OauthAuthCodes, error)
		Update(ctx context.Context, newData *OauthAuthCodes) error
		Delete(ctx context.Context, id string) error
	}

	defaultOauthAuthCodesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OauthAuthCodes struct {
		Id        string         `db:"id"`
		UserId    int64          `db:"user_id"`
		ClientId  int64          `db:"client_id"`
		Scopes    sql.NullString `db:"scopes"`
		Revoked   int64          `db:"revoked"`
		ExpiresAt sql.NullTime   `db:"expires_at"`
	}
)

func newOauthAuthCodesModel(conn sqlx.SqlConn) *defaultOauthAuthCodesModel {
	return &defaultOauthAuthCodesModel{
		conn:  conn,
		table: "`oauth_auth_codes`",
	}
}

func (m *defaultOauthAuthCodesModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOauthAuthCodesModel) FindOne(ctx context.Context, id string) (*OauthAuthCodes, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", oauthAuthCodesRows, m.table)
	var resp OauthAuthCodes
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOauthAuthCodesModel) Insert(ctx context.Context, data *OauthAuthCodes) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, oauthAuthCodesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.UserId, data.ClientId, data.Scopes, data.Revoked, data.ExpiresAt)
	return ret, err
}

func (m *defaultOauthAuthCodesModel) Update(ctx context.Context, data *OauthAuthCodes) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, oauthAuthCodesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.ClientId, data.Scopes, data.Revoked, data.ExpiresAt, data.Id)
	return err
}

func (m *defaultOauthAuthCodesModel) tableName() string {
	return m.table
}
