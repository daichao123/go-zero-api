// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	oauthClientsFieldNames          = builder.RawFieldNames(&OauthClients{})
	oauthClientsRows                = strings.Join(oauthClientsFieldNames, ",")
	oauthClientsRowsExpectAutoSet   = strings.Join(stringx.Remove(oauthClientsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	oauthClientsRowsWithPlaceHolder = strings.Join(stringx.Remove(oauthClientsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	oauthClientsModel interface {
		Insert(ctx context.Context, data *OauthClients) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OauthClients, error)
		Update(ctx context.Context, newData *OauthClients) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOauthClientsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OauthClients struct {
		Id                   int64         `db:"id"`
		UserId               sql.NullInt64 `db:"user_id"`
		Name                 string        `db:"name"`
		Secret               string        `db:"secret"`
		Redirect             string        `db:"redirect"`
		PersonalAccessClient int64         `db:"personal_access_client"`
		PasswordClient       int64         `db:"password_client"`
		Revoked              int64         `db:"revoked"`
		CreatedAt            sql.NullTime  `db:"created_at"`
		UpdatedAt            sql.NullTime  `db:"updated_at"`
	}
)

func newOauthClientsModel(conn sqlx.SqlConn) *defaultOauthClientsModel {
	return &defaultOauthClientsModel{
		conn:  conn,
		table: "`oauth_clients`",
	}
}

func (m *defaultOauthClientsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOauthClientsModel) FindOne(ctx context.Context, id int64) (*OauthClients, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", oauthClientsRows, m.table)
	var resp OauthClients
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOauthClientsModel) Insert(ctx context.Context, data *OauthClients) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, oauthClientsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Name, data.Secret, data.Redirect, data.PersonalAccessClient, data.PasswordClient, data.Revoked, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultOauthClientsModel) Update(ctx context.Context, data *OauthClients) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, oauthClientsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Name, data.Secret, data.Redirect, data.PersonalAccessClient, data.PasswordClient, data.Revoked, data.CreatedAt, data.UpdatedAt, data.Id)
	return err
}

func (m *defaultOauthClientsModel) tableName() string {
	return m.table
}
