// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adminRolesFieldNames          = builder.RawFieldNames(&AdminRoles{})
	adminRolesRows                = strings.Join(adminRolesFieldNames, ",")
	adminRolesRowsExpectAutoSet   = strings.Join(stringx.Remove(adminRolesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	adminRolesRowsWithPlaceHolder = strings.Join(stringx.Remove(adminRolesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	adminRolesModel interface {
		Insert(ctx context.Context, data *AdminRoles) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AdminRoles, error)
		Update(ctx context.Context, newData *AdminRoles) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAdminRolesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AdminRoles struct {
		Id        int64        `db:"id"`        // 自增id
		RoleName  string       `db:"role_name"` // 角色名称
		RoleDesc  string       `db:"role_desc"` // 角色描述
		CreatedAt sql.NullTime `db:"created_at"`
		UpdatedAt sql.NullTime `db:"updated_at"`
	}
)

func newAdminRolesModel(conn sqlx.SqlConn) *defaultAdminRolesModel {
	return &defaultAdminRolesModel{
		conn:  conn,
		table: "`admin_roles`",
	}
}

func (m *defaultAdminRolesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAdminRolesModel) FindOne(ctx context.Context, id int64) (*AdminRoles, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", adminRolesRows, m.table)
	var resp AdminRoles
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminRolesModel) Insert(ctx context.Context, data *AdminRoles) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, adminRolesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RoleName, data.RoleDesc, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultAdminRolesModel) Update(ctx context.Context, data *AdminRoles) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, adminRolesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.RoleName, data.RoleDesc, data.CreatedAt, data.UpdatedAt, data.Id)
	return err
}

func (m *defaultAdminRolesModel) tableName() string {
	return m.table
}
