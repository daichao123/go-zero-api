// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adminPermissionsFieldNames          = builder.RawFieldNames(&AdminPermissions{})
	adminPermissionsRows                = strings.Join(adminPermissionsFieldNames, ",")
	adminPermissionsRowsExpectAutoSet   = strings.Join(stringx.Remove(adminPermissionsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	adminPermissionsRowsWithPlaceHolder = strings.Join(stringx.Remove(adminPermissionsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	adminPermissionsModel interface {
		Insert(ctx context.Context, data *AdminPermissions) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AdminPermissions, error)
		FindOneByName(ctx context.Context, name string) (*AdminPermissions, error)
		Update(ctx context.Context, newData *AdminPermissions) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAdminPermissionsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AdminPermissions struct {
		Id          int64          `db:"id"`           // ID
		Name        string         `db:"name"`         // 权限名 英文
		DisplayName sql.NullString `db:"display_name"` // 显示名 中文
		Description sql.NullString `db:"description"`  // 描述
		Controllers sql.NullString `db:"controllers"`  // 对应的controllers
		CreatedAt   sql.NullTime   `db:"created_at"`
		UpdatedAt   sql.NullTime   `db:"updated_at"`
	}
)

func newAdminPermissionsModel(conn sqlx.SqlConn) *defaultAdminPermissionsModel {
	return &defaultAdminPermissionsModel{
		conn:  conn,
		table: "`admin_permissions`",
	}
}

func (m *defaultAdminPermissionsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAdminPermissionsModel) FindOne(ctx context.Context, id int64) (*AdminPermissions, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", adminPermissionsRows, m.table)
	var resp AdminPermissions
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminPermissionsModel) FindOneByName(ctx context.Context, name string) (*AdminPermissions, error) {
	var resp AdminPermissions
	query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", adminPermissionsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminPermissionsModel) Insert(ctx context.Context, data *AdminPermissions) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, adminPermissionsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.DisplayName, data.Description, data.Controllers, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultAdminPermissionsModel) Update(ctx context.Context, newData *AdminPermissions) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, adminPermissionsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Name, newData.DisplayName, newData.Description, newData.Controllers, newData.CreatedAt, newData.UpdatedAt, newData.Id)
	return err
}

func (m *defaultAdminPermissionsModel) tableName() string {
	return m.table
}
