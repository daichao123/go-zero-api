// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userRelationsFieldNames          = builder.RawFieldNames(&UserRelations{})
	userRelationsRows                = strings.Join(userRelationsFieldNames, ",")
	userRelationsRowsExpectAutoSet   = strings.Join(stringx.Remove(userRelationsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userRelationsRowsWithPlaceHolder = strings.Join(stringx.Remove(userRelationsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	userRelationsModel interface {
		Insert(ctx context.Context, data *UserRelations) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserRelations, error)
		FindOneByUserId(ctx context.Context, userId int64) (*UserRelations, error)
		Update(ctx context.Context, newData *UserRelations) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserRelationsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserRelations struct {
		Id           int64          `db:"id"`
		UserId       int64          `db:"user_id"`        // 用户id
		Root         sql.NullString `db:"root"`           // 关系链
		ParentUserId int64          `db:"parent_user_id"` // 父id（绑定用户）
		TeamNumber   int64          `db:"team_number"`
		CreatedAt    sql.NullTime   `db:"created_at"`
		UpdatedAt    sql.NullTime   `db:"updated_at"`
		BackPerce    float64        `db:"back_perce"`
	}
)

func newUserRelationsModel(conn sqlx.SqlConn) *defaultUserRelationsModel {
	return &defaultUserRelationsModel{
		conn:  conn,
		table: "`user_relations`",
	}
}

func (m *defaultUserRelationsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserRelationsModel) FindOne(ctx context.Context, id int64) (*UserRelations, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRelationsRows, m.table)
	var resp UserRelations
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRelationsModel) FindOneByUserId(ctx context.Context, userId int64) (*UserRelations, error) {
	var resp UserRelations
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", userRelationsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRelationsModel) Insert(ctx context.Context, data *UserRelations) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, userRelationsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Root, data.ParentUserId, data.TeamNumber, data.CreatedAt, data.UpdatedAt, data.BackPerce)
	return ret, err
}

func (m *defaultUserRelationsModel) Update(ctx context.Context, newData *UserRelations) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRelationsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.UserId, newData.Root, newData.ParentUserId, newData.TeamNumber, newData.CreatedAt, newData.UpdatedAt, newData.BackPerce, newData.Id)
	return err
}

func (m *defaultUserRelationsModel) tableName() string {
	return m.table
}
