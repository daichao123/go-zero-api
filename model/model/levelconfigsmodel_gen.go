// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	levelConfigsFieldNames          = builder.RawFieldNames(&LevelConfigs{})
	levelConfigsRows                = strings.Join(levelConfigsFieldNames, ",")
	levelConfigsRowsExpectAutoSet   = strings.Join(stringx.Remove(levelConfigsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	levelConfigsRowsWithPlaceHolder = strings.Join(stringx.Remove(levelConfigsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	levelConfigsModel interface {
		Insert(ctx context.Context, data *LevelConfigs) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*LevelConfigs, error)
		Update(ctx context.Context, newData *LevelConfigs) error
		Delete(ctx context.Context, id int64) error
	}

	defaultLevelConfigsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	LevelConfigs struct {
		Id        int64         `db:"id"`
		LevelType string        `db:"level_type"` // 等级类型
		Level     int64         `db:"level"`      // 等级值
		LevelName string        `db:"level_name"` // 等级名称
		Status    sql.NullInt64 `db:"status"`     // 状态 -1删除；0关闭；1开启
		CreatedAt sql.NullTime  `db:"created_at"`
		UpdatedAt sql.NullTime  `db:"updated_at"`
	}
)

func newLevelConfigsModel(conn sqlx.SqlConn) *defaultLevelConfigsModel {
	return &defaultLevelConfigsModel{
		conn:  conn,
		table: "`level_configs`",
	}
}

func (m *defaultLevelConfigsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultLevelConfigsModel) FindOne(ctx context.Context, id int64) (*LevelConfigs, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", levelConfigsRows, m.table)
	var resp LevelConfigs
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLevelConfigsModel) Insert(ctx context.Context, data *LevelConfigs) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, levelConfigsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.LevelType, data.Level, data.LevelName, data.Status, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultLevelConfigsModel) Update(ctx context.Context, data *LevelConfigs) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, levelConfigsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.LevelType, data.Level, data.LevelName, data.Status, data.CreatedAt, data.UpdatedAt, data.Id)
	return err
}

func (m *defaultLevelConfigsModel) tableName() string {
	return m.table
}
