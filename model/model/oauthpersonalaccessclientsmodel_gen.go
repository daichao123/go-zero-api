// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	oauthPersonalAccessClientsFieldNames          = builder.RawFieldNames(&OauthPersonalAccessClients{})
	oauthPersonalAccessClientsRows                = strings.Join(oauthPersonalAccessClientsFieldNames, ",")
	oauthPersonalAccessClientsRowsExpectAutoSet   = strings.Join(stringx.Remove(oauthPersonalAccessClientsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	oauthPersonalAccessClientsRowsWithPlaceHolder = strings.Join(stringx.Remove(oauthPersonalAccessClientsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	oauthPersonalAccessClientsModel interface {
		Insert(ctx context.Context, data *OauthPersonalAccessClients) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OauthPersonalAccessClients, error)
		Update(ctx context.Context, newData *OauthPersonalAccessClients) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOauthPersonalAccessClientsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OauthPersonalAccessClients struct {
		Id        int64        `db:"id"`
		ClientId  int64        `db:"client_id"`
		CreatedAt sql.NullTime `db:"created_at"`
		UpdatedAt sql.NullTime `db:"updated_at"`
	}
)

func newOauthPersonalAccessClientsModel(conn sqlx.SqlConn) *defaultOauthPersonalAccessClientsModel {
	return &defaultOauthPersonalAccessClientsModel{
		conn:  conn,
		table: "`oauth_personal_access_clients`",
	}
}

func (m *defaultOauthPersonalAccessClientsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOauthPersonalAccessClientsModel) FindOne(ctx context.Context, id int64) (*OauthPersonalAccessClients, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", oauthPersonalAccessClientsRows, m.table)
	var resp OauthPersonalAccessClients
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOauthPersonalAccessClientsModel) Insert(ctx context.Context, data *OauthPersonalAccessClients) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, oauthPersonalAccessClientsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ClientId, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultOauthPersonalAccessClientsModel) Update(ctx context.Context, data *OauthPersonalAccessClients) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, oauthPersonalAccessClientsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ClientId, data.CreatedAt, data.UpdatedAt, data.Id)
	return err
}

func (m *defaultOauthPersonalAccessClientsModel) tableName() string {
	return m.table
}
