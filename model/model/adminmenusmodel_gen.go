// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adminMenusFieldNames          = builder.RawFieldNames(&AdminMenus{})
	adminMenusRows                = strings.Join(adminMenusFieldNames, ",")
	adminMenusRowsExpectAutoSet   = strings.Join(stringx.Remove(adminMenusFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	adminMenusRowsWithPlaceHolder = strings.Join(stringx.Remove(adminMenusFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	adminMenusModel interface {
		Insert(ctx context.Context, data *AdminMenus) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AdminMenus, error)
		Update(ctx context.Context, newData *AdminMenus) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAdminMenusModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AdminMenus struct {
		Id        int64          `db:"id"`
		ParentId  int64          `db:"parent_id"` // 上级ID
		Order     int64          `db:"order"`     // 菜单排序,从1开始,数字越小排在超前,0为排在最后
		Title     sql.NullString `db:"title"`     // 标题
		Icon      string         `db:"icon"`      // 图标
		Uri       string         `db:"uri"`       // URI
		Routes    sql.NullString `db:"routes"`    // 路由,如url:/menu,controller:MenuController
		CreatedAt sql.NullTime   `db:"created_at"`
		UpdatedAt sql.NullTime   `db:"updated_at"`
	}
)

func newAdminMenusModel(conn sqlx.SqlConn) *defaultAdminMenusModel {
	return &defaultAdminMenusModel{
		conn:  conn,
		table: "`admin_menus`",
	}
}

func (m *defaultAdminMenusModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAdminMenusModel) FindOne(ctx context.Context, id int64) (*AdminMenus, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", adminMenusRows, m.table)
	var resp AdminMenus
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminMenusModel) Insert(ctx context.Context, data *AdminMenus) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, adminMenusRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ParentId, data.Order, data.Title, data.Icon, data.Uri, data.Routes, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultAdminMenusModel) Update(ctx context.Context, data *AdminMenus) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, adminMenusRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ParentId, data.Order, data.Title, data.Icon, data.Uri, data.Routes, data.CreatedAt, data.UpdatedAt, data.Id)
	return err
}

func (m *defaultAdminMenusModel) tableName() string {
	return m.table
}
