// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	countriesFieldNames          = builder.RawFieldNames(&Countries{})
	countriesRows                = strings.Join(countriesFieldNames, ",")
	countriesRowsExpectAutoSet   = strings.Join(stringx.Remove(countriesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	countriesRowsWithPlaceHolder = strings.Join(stringx.Remove(countriesFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	countriesModel interface {
		Insert(ctx context.Context, data *Countries) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Countries, error)
		Update(ctx context.Context, newData *Countries) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCountriesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Countries struct {
		Id     int64          `db:"id"`
		Name   string         `db:"name"`    // 中文名称
		EnName sql.NullString `db:"en_name"` // 英文名称
		IdName sql.NullString `db:"id_name"` // 印尼语名称
		Status int64          `db:"status"`  // 状态 -1删除，0关闭，1开启
	}
)

func newCountriesModel(conn sqlx.SqlConn) *defaultCountriesModel {
	return &defaultCountriesModel{
		conn:  conn,
		table: "`countries`",
	}
}

func (m *defaultCountriesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCountriesModel) FindOne(ctx context.Context, id int64) (*Countries, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", countriesRows, m.table)
	var resp Countries
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCountriesModel) Insert(ctx context.Context, data *Countries) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, countriesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.EnName, data.IdName, data.Status)
	return ret, err
}

func (m *defaultCountriesModel) Update(ctx context.Context, data *Countries) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, countriesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.EnName, data.IdName, data.Status, data.Id)
	return err
}

func (m *defaultCountriesModel) tableName() string {
	return m.table
}
